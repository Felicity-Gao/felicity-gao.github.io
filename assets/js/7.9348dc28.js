(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{359:function(s,t,a){"use strict";a.r(t);var e=a(42),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则"}},[s._v("#")]),s._v(" 正则")]),s._v(" "),a("h2",{attrs:{id:"_1-定界符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-定界符"}},[s._v("#")]),s._v(" 1. 定界符")]),s._v(" "),a("p",[s._v("包括：\\b(单词边界)，\\B(非单词边界)，^(开头的位置)，$(结尾的位置)")]),s._v(" "),a("h4",{attrs:{id:"难点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#难点"}},[s._v("#")]),s._v(" 难点")]),s._v(" "),a("p",[s._v("\\b : 单词边界，用于匹配完整的单词而不是某个单词中含有的字符串。如："),a("code",[s._v("/\\bapple\\b/g")]),s._v("可以匹配"),a("code",[s._v("apple")]),s._v(",但不能匹配到"),a("code",[s._v("aapple")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\bapple\\b/g")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'apple'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// =>  ["apple"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aapple'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// => null")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("\\B : 表示非单词边界，即：一个单词内每个字符间的位置。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'123 456'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\B/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// =>  "1-2-3 4-5-6"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"_2-高级匹配用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-高级匹配用法"}},[s._v("#")]),s._v(" 2. 高级匹配用法")]),s._v(" "),a("p",[s._v("我们常用一组"),a("code",[s._v("()")]),s._v("来把匹配分组，括号扩住的相关匹配会被缓存起来。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式")]),s._v(" "),a("h4",{attrs:{id:"_2-1-反向引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-反向引用"}},[s._v("#")]),s._v(" 2.1 反向引用")]),s._v(" "),a("ul",[a("li",[s._v("在表达式之外我们使用"),a("code",[s._v("$n")]),s._v("的方式就可以取到每组的匹配值。要取第几个括号的内容 n 就是几。")]),s._v(" "),a("li",[s._v("在表达式之内我们可以使用"),a("code",[s._v("\\n")]),s._v("来获取匹配， n 为一个标识特定缓冲区的一位或两位十进制数。")])]),s._v(" "),a("h4",{attrs:{id:"_2-2-非捕获匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-非捕获匹配"}},[s._v("#")]),s._v(" 2.2 非捕获匹配")]),s._v(" "),a("p",[s._v("语法是"),a("code",[s._v("(?:xxx)")]),s._v(" 使用此格式，匹配到的值将不会被缓存。")]),s._v(" "),a("h4",{attrs:{id:"_2-3-零宽断言-预查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-零宽断言-预查"}},[s._v("#")]),s._v(" 2.3 零宽断言(预查)：")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("(?+符号+匹配项)")]),s._v("格式，预查"),a("strong",[s._v("不消耗字符")]),s._v("，也就是说，在一个匹配发生后，在预查前的最后一次匹配到的结果之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始")]),s._v(" "),a("ul",[a("li",[s._v("(?=xxx): 正向肯定预查， "),a("code",[s._v("exp1(?=exp2)")]),s._v("：查找后面有 exp2 的 exp1。 该表达式只能置于"),a("strong",[s._v("右侧")])]),s._v(" "),a("li",[s._v("(?<=xxx): 反向肯定预查， "),a("code",[s._v("(?<=exp2)exp1")]),s._v("：查找前面是 exp2 的 exp1。该表达式只能置于"),a("strong",[s._v("左侧")])]),s._v(" "),a("li",[s._v("(?!xxx): 正向否定预查，"),a("code",[s._v("exp1(?!exp2)")]),s._v("：查找后面不是 exp2 的 exp1, 该表达式只能置于"),a("strong",[s._v("右侧")])]),s._v(" "),a("li",[s._v("(?<!=xxx): 反向否定预查， "),a("code",[s._v("(?<!=exp2)exp1")]),s._v("：查找前面不是 exp2 的 exp1。该表达式只能置于"),a("strong",[s._v("左侧")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'myapple apple people simple'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?!ap)ple/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// => ["ple", "ple", "ple", "ple"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'myapple apple people simple'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<!ap)ple/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// => ["ple", "ple"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 预查不消耗字符串的示例")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'12345678901'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\B(?=(?:\\d{4})+$)/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// => '123-4567-8901'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'pa pad p apa apad'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\bp(?=a)\\b/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// => null 这相当于一个死循环，所以不会匹配")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"_3-正则测试方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-正则测试方法"}},[s._v("#")]),s._v(" 3. 正则测试方法")]),s._v(" "),a("h4",{attrs:{id:"_3-1-regexp方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-regexp方法"}},[s._v("#")]),s._v(" 3.1 RegExp方法")]),s._v(" "),a("p",[a("code",[s._v("RegExp对象")]),s._v("包含两个常用方法："),a("code",[s._v("test()")]),s._v("和"),a("code",[s._v("exec()")]),s._v("，功能基本相似，用于测试字符串匹配。")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("reg.test(string)")]),s._v("方法在字符串中查找是否存在指定的正则表达式，并返回布尔值，如果存在则返回true，否则返回false。")]),s._v(" "),a("li",[a("code",[s._v("reg.exec(string)")]),s._v("方法也用于在字符串中查找指定正则表达式，如果exec()执行成功，则返回包含该查找字符串的相关信息数据，否则返回null。（返回结果数组）")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/[^(ap)]ple\\b/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'apple simple people'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// => ["mple", index: 8, input: "apple simple people", groups: undefined]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h4",{attrs:{id:"_3-2-字符串方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-字符串方法"}},[s._v("#")]),s._v(" 3.2 字符串方法")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("match(pattern)")]),s._v(": 在一个字符串中寻找一个与正则表达式模式（pattern）的匹配，返回pattern匹配到的字符串或者null")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'apple people simple'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<=peo)(ple)/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// => ["ple"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[s._v("replace(pattern,replacement)")]),s._v(": 用replacement替换pattern")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'apple people simple'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\b/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// => "-apple- -people- -simple-"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[s._v("search(pattern)")]),s._v(": 返回正则(pattern)匹配到的字符串的首字母在string中的位置（下标）,没有匹配到则返回"),a("code",[s._v("-1")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xiao da duo shao '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/ao/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// => 2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xiao da duo shao '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/qq/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// => -1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[a("code",[s._v("split(pattern)")]),s._v(": 返回字符串按指定pattern拆分的数组")])]),s._v(" "),a("h2",{attrs:{id:"_4-命名分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-命名分组"}},[s._v("#")]),s._v(" 4. 命名分组")]),s._v(" "),a("p",[s._v("命名分组d的语法是 "),a("code",[s._v("(?<name>...)")]),s._v(", 反向引用的语法是 "),a("code",[s._v("\\k<name>")]),s._v("或"),a("code",[s._v("$<name>")]),s._v("，也可以通过数字索引来反向引用。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<foo>a)\\k<foo>\\1/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aaa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<foo>a)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$<foo>-"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "a-bc"，同样 $1 仍然可用')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("exec()")]),s._v(" 和 "),a("code",[s._v("match()")]),s._v(" 方法返回的匹配结果数组上多了一个 groups 属性， groups 属性只有在当前正则里至少存在一个命名分组的前提下才会存在，可以利用 ES6 的解构语法，方便的取出想要的字段")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"04-25-2017"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<month>\\d{2})-(?<day>\\d{2})-(?<year>\\d{4})/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["04-25-2017", "04", "25", "2017", index: 0, input: "04-25-2017",')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// groups: {month: "04", day: "25", year: "2017"}]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);